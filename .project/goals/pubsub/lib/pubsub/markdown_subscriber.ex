defmodule Pubsub.MarkdownSubscriber do
  @moduledoc """
  Subscriber that formats articles as Markdown.
  """

  use GenServer
  require Logger

  def start_link(_opts) do
    GenServer.start_link(__MODULE__, %{}, name: __MODULE__)
  end

  ## Callbacks

  @impl true
  def init(state) do
    Logger.info("Markdown Subscriber started")
    Pubsub.EventBus.subscribe(:article_published)
    {:ok, state}
  end

  @impl true
  def handle_info({:event, :article_published, article}, state) do
    Logger.info("Markdown Subscriber received article: #{article.title}")
    markdown_content = format_as_markdown(article)

    File.write!("article_#{article.id}_markdown.md", markdown_content)
    Logger.info("Article formatted as Markdown and saved to article_#{article.id}_markdown.md")

    {:noreply, state}
  end

  defp format_as_markdown(article) do
    json = Pubsub.Article.to_json(article)

    """
    # #{article.title}

    **Author:** #{article.author}
    **Published:** #{DateTime.to_string(article.published_at)}
    **ID:** #{article.id}

    ## Content

    #{article.content}

    ---

    ## JSON Representation

    ```json
    #{json}
    ```

    *Generated by Markdown Subscriber*
    """
  end
end
